/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/wB4HOBMprQW
 */
import { Button } from "@/components/ui/button"
import { CardContent, Card } from "@/components/ui/card"
import { useConnection, useWallet, useAnchorWallet } from "@solana/wallet-adapter-react";
import React, { FC, useCallback, useEffect } from "react";
import * as anchor from '@project-serum/anchor'
import { Keypair, PublicKey } from "@solana/web3.js";
import { closeCounter, createCounter, decreaseCounter, increaseCounter } from "@/hooks/counter";
import config from "@/config";
import { fetchDataAccount, getProgram } from "@/hooks/anchor";

const { BN } = anchor

interface CounterAcc { count: number }

export const Counter: FC = () => {
  const { connection } = useConnection();
  const { publicKey } = useWallet();
  const wallet = useAnchorWallet()
  const [dataAcc, setDataAcc] = React.useState<CounterAcc>()
  const [hasCounter, setHasCounter] = React.useState<boolean>(false)
  const [dataAccPubKey, setDataAccPubKey] = React.useState<PublicKey>()
  const WalletData = { connection, wallet, programId: config.counterProgramId }

  const getData = async () => {
    if (!dataAccPubKey) return
    const acc = await fetchDataAccount<CounterAcc>(connection, wallet, config.counterProgramId, dataAccPubKey, config.counterIdl)
    if (acc) {
      setDataAcc(acc)
      setHasCounter(true)
    } else {
      setHasCounter(false)
      setDataAcc(undefined)
    }
  }

  useEffect(() => {
    if (!dataAccPubKey) return
    getData()
  }, [dataAccPubKey])

  useEffect(() => {
    if (!publicKey) return
    const [userCounterPDA, _] = PublicKey.findProgramAddressSync(
      [
        anchor.utils.bytes.utf8.encode("counter"),
        publicKey.toBuffer(),
      ],
      config.counterProgramId
    );
    setDataAccPubKey(userCounterPDA)
  }, [publicKey])


  const create = useCallback(async () => {
    const { pubKey } = await createCounter(WalletData, publicKey)
    setDataAccPubKey(pubKey)
    console.log('created counter', pubKey.toBase58())

    setTimeout(() => {
      getData()
    }, 1000);
  }, [wallet, connection, publicKey])

  const increase = useCallback(async () => {
    if (!dataAccPubKey) return
    const hash = await increaseCounter(WalletData, dataAccPubKey, new BN(4))
    setTimeout(() => {
      getData()
    }, 1000);
  }, [wallet, connection, dataAccPubKey])

  const decrease = useCallback(async () => {
    if (!dataAccPubKey) return
    await decreaseCounter(WalletData, dataAccPubKey, new BN(20))
    setTimeout(() => {
      getData()
    }, 1000 * 2);
  }, [wallet, connection, dataAccPubKey])

  const closePda = useCallback(async () => {
    if (!dataAccPubKey) return
    const hash = await closeCounter(WalletData, dataAccPubKey)
    setDataAccPubKey(undefined)
    setHasCounter(false)
  }, [wallet, connection, dataAccPubKey])

  return (
    //w-full py-8 md:py-16 lg:py-24 xl:py-32
    <section key="1" className="w-full py-8 md:py-16 lg:py-24 xl:py-32">
      <div className="container px-8 md:px-12 lg:px-24 xl:px-32 mx-auto">
        <div className="grid gap-6 lg:grid-cols-[1fr_1fr] lg:gap-12 xl:grid-cols-[1fr_1fr]">
          <div className="flex flex-col justify-center space-y-4">
            <div className="space-y-2 mb-8">
              <h1 className="text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none">
                Create and Manage Your Counter
              </h1>
              <p className="max-w-[600px] text-gray-500 md:text-xl dark:text-gray-400">
                Initiate a new counter and manage its value with ease. Click the button below to get started.
              </p>
            </div>
            <Card>
              <CardContent className="flex flex-col items-start gap-2 p-4">
                <div className="space-y-1 leading-none">
                  <h2 className="text-2xl font-semibold">Manage Your Counter</h2>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Use the buttons below to increase, decrease or create your counter.
                  </p>
                </div>
                <div className={hasCounter ? 'hidden' : 'block'}>
                  <Button
                    className="inline-flex h-10 items-center justify-center rounded-md bg-black px-8 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-900/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed"
                    onClick={() => { create() }}
                    disabled={!publicKey || hasCounter}
                  >
                    Initiate Counter
                  </Button>
                </div>
                <div className={hasCounter ? 'block' : 'hidden'}>
                  <div className="flex flex-row gap-2 mt-4">
                    <Button
                      onClick={() => { increase() }}
                      disabled={!dataAcc}
                      className="inline-flex h-10 bg-black items-center justify-center rounded-md px-8 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-900/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50">
                      Increase
                    </Button>
                    <Button
                      onClick={() => { decrease() }}
                      disabled={!dataAcc}
                      className="inline-flex h-10 bg-black items-center justify-center rounded-md px-8 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-900/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50">
                      Decrease
                    </Button>
                    <Button
                      onClick={() => { closePda() }}
                      disabled={!dataAcc}
                      className="inline-flex h-10 bg-black items-center justify-center rounded-md px-8 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-900/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50"
                    >
                      Delete Counter
                    </Button>
                  </div>
                  <div className="mt-4">
                    <p className="text-sm text-gray-500 dark:text-gray-400 overflow-auto">Public Address: {hasCounter ? dataAccPubKey?.toBase58() : null}</p>
                  </div>
                  <div className="mt-2">
                    <p className="text-sm text-gray-500 dark:text-gray-400">Current Count: {dataAcc?.count.toString()}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          <div className="flex flex-col justify-center space-y-4 hidden md:block overflow-x-auto sm:mt-8">
            <pre>
              <code className="text-xs">
                {`#[derive(Accounts)]
pub struct Initalize<'info> {
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(
        init, payer = user, space = 8 + 1,
        seeds=[b"counter", user.key().as_ref()], bump
    )]
    pub set: Account<'info, Counter>,
    pub system_program: Program<'info, System>,
}

#[program]
mod my_counter {
    use super::*;
    pub fn initialize(ctx: Context<Initalize>) -> Result<()> {
        ctx.accounts.set.count = 0;
        msg!("Initalize account");
        Ok(())
    }
    pub fn decrease_counter(ctx: Context<UpdateCounter>, number: u8) -> Result<()> {
        require!(number > 10, MyError::MaxStepSize);
        ctx.accounts.set.count -= number;
        msg!("Decrease counter {}", number);
        Ok(())
    }
    
    [...]
}`}
              </code>
            </pre>
          </div>
        </div>
        <div className="flex justify-end mt-6" />
      </div>
    </section>
  )
}
