/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/hRmw9MNXyWu
 */
import { Button } from "@/components/ui/button"
import { CardTitle, CardHeader, CardContent, Card } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { createOraclePdaUsingAnchor, writeData } from "@/hooks/oracle"
import { Connection, Keypair, PublicKey, clusterApiUrl } from "@solana/web3.js"
import { use, useCallback, useEffect, useRef, useState } from "react"
import * as anchor from '@project-serum/anchor'
import config from "@/config"
import Link from "next/link"

const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

export function Oracle() {
  const priceData = useRef<number>(0)
  const [price, setPrice] = useState<number>(0)
  const [transactionLog, setTransactionLog] = useState<{ hash: string, price: number }[]>([])
  const [isRunning, setIsRunning] = useState<boolean>(false)
  const connection = new Connection(clusterApiUrl("devnet"), "confirmed")

  const seed = [
    145, 67, 244, 0, 128, 81, 28, 140, 30, 34, 98, 163, 92, 237, 42, 201, 188,
    27, 149, 49, 177, 247, 38, 203, 54, 213, 5, 101, 164, 246, 156, 7,
  ];
  const keypair = Keypair.fromSeed(new Uint8Array(seed));

  const ws = new WebSocket("wss://stream.binance.com:9443/ws/btcusdt@ticker")

  ws.onmessage = (event) => {
    const data = JSON.parse(event.data)
    priceData.current = parseFloat(data.c)
  }

  useEffect(() => {
    const interval = setInterval(() => {
      setPrice(priceData.current)
    }, 1000)
    return () => clearInterval(interval)
  }, [])

  const write = async (pda: PublicKey) => {
    if (!priceData) return

    const max = 5
    for (let i = 0; i < max; i++) {
      console.log('writting', priceData);
      const hash = await writeData(pda, keypair, connection, Math.floor(priceData.current * 1000));
      console.log(hash);
      setTransactionLog((prev) => [...prev, { hash, price: priceData.current }]);

      if (transactionLog.length > 50) {
        setTransactionLog((prev) => prev.slice(1));
      }

      if (i < max - 1) await sleep(5000);
    }
  }


  const start = useCallback(async () => {
    setIsRunning(true)
    const [pda] = PublicKey.findProgramAddressSync(
      [
        anchor.utils.bytes.utf8.encode("oracle"),
        keypair.publicKey.toBuffer(),
      ],
      config.myOracleProgramId
    );

    await createOraclePdaUsingAnchor(keypair, connection, pda, "BTC/USD")
      .catch((err: unknown) => {
        console.log('err', err)
        return {}
      })

    await write(pda)
    setIsRunning(false)
  }, [connection, priceData])

  return (
    <section className="w-full py-8 md:py-16 lg:py-24 xl:py-32">
      <div className="container px-8 md:px-12 lg:px-24 xl:px-32 mx-auto">
        <div className="grid gap-6 lg:grid-cols-[1fr_400px] lg:gap-12 xl:grid-cols-[1fr_600px]">
          <div className="flex flex-col justify-center space-y-4">
            <div className="space-y-2">
              <h1 className="text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none">
                Interact with On-Chain Oracle
              </h1>
              <p className="max-w-[600px] text-gray-500 md:text-xl dark:text-gray-400">
                Data is being loaded from the websocket of a crypto exchange and fed into the oracle. View current data
                and transaction logs.
              </p>
            </div>
            <div className="w-full max-w-sm space-y-2">
              <Button
                className="inline-flex h-10 bg-black items-center justify-center rounded-md px-8 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-900/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50"
                onClick={start}
                disabled={isRunning}
              >
                Start
              </Button>
            </div>
          </div>
          <div className="flex flex-col space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Incoming Data Stream</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="space-y-1">
                  <p className="text-gray-500">{price ? '$' + price.toFixed(2) : 'Waiting for data stream'}</p>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Transaction Log</CardTitle>
              </CardHeader>
              <ScrollArea className="h-72 w-full rounded-md border">
                <CardContent className="p-4 text-sm">
                  {isRunning && transactionLog.length === 0 && (
                    <div className="flex items-center space-x-2 leading-7">
                      <span>Waiting for first data to be written *every 5s*</span>
                    </div>
                  )}
                  {transactionLog.map((log, index) => (
                    <div key={index} className="flex items-center space-x-2 leading-7">
                      <span className="font-semibold">Updating:</span>
                      <Link href={`https://explorer.solana.com/tx/${log.hash}?cluster=devnet`} target={'_blank'}>
                        <p className="underline">
                          Hash: {log.hash.slice(0, 5)}...
                        </p>
                      </Link>
                      <span className="font-semibold"> Price:</span> {log.price}
                    </div>
                  ))}
                </CardContent>
              </ScrollArea>
            </Card>
          </div>
        </div>
      </div>
    </section>
  )
}
